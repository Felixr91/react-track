{"version":3,"sources":["components/ChangeLocation.js","components/Nav.js","components/Icon.js","components/WeatherCard.js","components/FiveDay.js","App.js","reportWebVitals.js","index.js"],"names":["ChangeLocation","onUpdate","useState","city","setCity","className","onSubmit","e","preventDefault","alert","value","onChange","target","type","Nav","to","Icon","icon","console","log","src","data","WeatherCard","description","datetxt","kelvin","split","FiveDay","hourly","ar","map","i","weather","main","temp","dt_txt","dt","App","setTemp","setIcon","setDescription","setFiveDay","location","str","fetchCity","a","fetch","res","json","name","fahren","Math","floor","info","fetchFiveDay","list","length","path","exact","render","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.114a0567.chunk.js","sourcesContent":["import { useState } from 'react'\n\nconst ChangeLocation = ({ onUpdate }) => {\n    const[city, setCity] = useState('')\n    \n\n    const onSubmit = (e) =>{\n        e.preventDefault()\n\n        if(!city){\n            alert(\"Please provide a city\")\n            return\n        }\n\n        onUpdate({city})\n\n        setCity('')\n\n    }\n  \n\n    return (\n\n    <div className=\"container\">\n        \n        <form className=\"change-location\" onSubmit={onSubmit}>\n            <label className=\"location-label\">Enter City Name</label>\n            <input className=\"location-field\" value={city} onChange={(e) => setCity(e.target.value)}></input>\n            <input type=\"submit\" value=\"GO\" className=\"btn\"></input>\n        </form>\n        \n    </div>\n\n    );\n\n}\n\nexport default ChangeLocation","import {Link} from 'react-router-dom'\n// import React from 'react'\n\nconst Nav = () => {\n    return (\n        <div className=\"navigation\">\n\n            <Link className=\"links\" to=\"/\">Today's Forcast</Link>\n            <Link className=\"links\" to=\"/five-day\">5 Day Hourly Forcast</Link>\n            \n        </div>\n    )\n}\n\nexport default Nav\n","const Icon = (icon) => {\n        console.log(icon)\n    return (\n        <div>\n            <img className='icon' src={('https://openweathermap.org/img/w/' + icon.data + '.png')}></img>\n            \n        </div>\n    )\n}\n\nexport default Icon\n","import { useState } from 'react'\nimport Icon from './Icon'\n\nconst WeatherCard = ({ description, kelvin, datetxt, icon }) => {\n\n    \n    const formatDate = () =>{\n        const dd = datetxt.split(\" \")\n        return dd[0]\n    }\n\n    const formatTime = () =>{\n        const dd = datetxt.split(\" \")\n        return dd[1]\n    }\n\n    return (\n        <div className=\"hourly-card\">\n            \n            <h3>{formatDate()}</h3>\n            <h3>{formatTime()}</h3>\n            <p>{description}</p>\n            <Icon data={icon}></Icon>\n\n        </div>\n    )\n}\n\nexport default WeatherCard\n","import {Link} from 'react-router-dom'\nimport WeatherCard from './WeatherCard'\n// import { useState } from 'react'\n// import React from 'react'\n\nconst FiveDay = (hourly) => {\n\n    const ar = hourly['data']\n    console.log(ar)\n\n    return (\n        <div className=\"five-day-container\">\n            <h4>5 Day Forcast</h4>\n            {/* <Link to=\"/\">Go Back</Link> */}\n            <>\n            {ar.map((i) => (\n                <WeatherCard \n                    key={i.dt} \n                    description={i.weather[0].description} \n                    kelvin={i.main.temp}\n                    datetxt = {i.dt_txt}\n                    icon = {i.weather[0].icon}\n                >\n                </WeatherCard>\n            ))}\n            </>\n\n        </div>\n    )\n}\n\nexport default FiveDay\n","import { useState } from 'react'\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport ChangeLocation from './components/ChangeLocation'\nimport Nav from './components/Nav'\nimport FiveDay from './components/FiveDay'\nimport Icon from './components/Icon'\n\n\nconst App = () =>{\n\n  const[city, setCity] = useState('')\n  const[temp, setTemp] = useState('')\n  const[icon, setIcon] = useState('')\n  const[description, setDescription] = useState('')\n  const[hourly, setFiveDay] = useState([])\n\n  const updateLocal = (location) =>{\n    var str = location.city\n\n    const fetchCity = async(e) => {\n      try{\n        const res = await fetch('https://api.openweathermap.org/data/2.5/weather?q='+ str +'&appid=bbbcf0b66757cacaecb5670689170a6b')\n        const data = await res.json()\n        const city = data.name\n        const kelvin = data.main.temp\n        const fahren = (Math.floor(1.8 * (kelvin - 273) + 32))\n        const icon = data.weather[0].icon\n        const info = data.weather[0].description\n\n        setCity(city)\n        setTemp(fahren+'Â°F')\n        setIcon(icon)\n        setDescription(info)\n        } catch(e){\n          alert('Please provide a valid city')\n        }\n    }\n    \n\n    const fetchFiveDay = async(e) => {\n      try{\n        const res = await fetch('https://api.openweathermap.org/data/2.5/forecast?q='+ str +'&appid=bbbcf0b66757cacaecb5670689170a6b')\n        const data = await res.json()\n        const hourly = data.list\n\n\n        setFiveDay(hourly)\n        } catch(e){\n          console.log('could not get 5 Day')\n        }\n    }\n\n    fetchCity(str)\n    fetchFiveDay(str)\n\n  }\n\n  return (\n    <Router>\n      <div className=\"container\">\n        \n        <Nav></Nav>\n        <h1>Local Weather App</h1>\n\n        <ChangeLocation onUpdate={updateLocal}></ChangeLocation>\n\n        {city.length > 0 ? \n          <div className=\"todays-weather\">\n            <h2>{city}</h2>\n\n            <Route path=\"/\" exact render={(props)=>(\n              <>\n                <h2>{temp}</h2>\n\n                {icon.length > 0 ? \n                  <div>\n                    <Icon data={icon}/> \n                    {description}\n                  </div>\n                : ''}\n              </>\n            )}/>\n          </div>\n        : ''}\n        \n        <Route path=\"/five-day\">\n          <FiveDay data={hourly}></FiveDay>\n        </Route>\n            \n        \n\n      </div>\n    </Router>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}